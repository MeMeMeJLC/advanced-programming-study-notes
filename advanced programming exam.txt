advanced programming exam

question 2 - bad smells
*what is the bad smells
1. how do you know it is that bad smell, and how is it solved?
2. what does it look like?
3. how does removing it improve reusability?
4. what is the step by step to remove the bad smell?

STEPS=
1. write test cases
2. test that current functionality works against requirements
3. examine the source code for bad smells
4. identify biggest smells
5. set up version control
6. plan treatment of bad smell
7. implement treatment
8. run tests to ensure code is still working
9. reanalyse code - did it solve the smell? if not go back to step 6 and continue until biggest smell solved.
10. back up via version control
11. Go back to step 3, look for next biggest bad smell to fix. Make sure no new bad smell introduced.


	***bloaters***
*long method
1. how do you know it is that bad smell, and how is it solved?
	-method has more than 10 lines
	-can use EXTRACT METHOD (code fragment can be grouped together and put in a new method, replace the old code with a call to the new method)
	-if local vars too intertwined that you cant apply Extract Method then use REPLACE METHOD WITH METHOD OBJECT (transform the method into a separate method so that the local variables become fields of the class. then you can split the method into several methods wiithin the same class.) 
	-if complex conditional (switch) then decompose the complicated parts of the conditional into separate methods. 

3. how does removing it improve reusability?
	Easier to understand and maintain so more likely to be reused by others or kept. 
		
*Large class
1. how do you know it is that bad smell, and how is it solved?
	- class contains many fields/methods/lines of code.
	- Trying to do too many different things, wearing too many hats.
	HOW TO SOLVE
	- Extract class (if part of behaviour can be put into different class)
	- Extract subclass (If parts of the class can be implemented in different ways or is used in rare cases)
	- Extract interface (if it is necessary to have a list of the operatings and behaviours that the client can use)

3. how does removing it improve reusability?
	Easier to read and understand, easier to maintain. Avoids duplication of code and functionality. 
	
*Primitive Obsession
1. how do you know it is that bad smell, and how is it solved?
	- Use of primatives instead of small objects for simpler tasks(eg: currency, ranges, special strings for phone numbers)
	- Use of constants for coding information (such as a constant USER_ADMN_ROLE = 1 for referring to users with admin rights)
	- Use of string constants as field names for use in data arrays.

	- If you have large variety of primative fields maybe logically group them into their own class and maybe move associated data into the class too. REPLACE DATA VALUE WITH OBJECT.
	- If the values of primative fields are used in method params then INTRODUCE PARAM OBJECT
	- If there are arrays among the vars use REPLACE ARRAY WITH OBJECT

3. how does removing it improve reusability?
	Using objects make the code more flexible because the values can be changed easier.
	Better understandability and organisation of code. Operations on particular data are in the same place. No more guessing the reason for each constant.
	Easier to find duplication

*Long Param List
1. how do you know it is that bad smell, and how is it solved?
	-More than 3 or 4 params for a method
	
	- If some of the params are just results of method calls of another object use REPLACE PARAM WITH METHOD CALL
	- Instead of passing a group of data received from another object as params, pass the object itself to the method using PRESERVE WHOLE OBJECT
	- If there are several unrelated data elements, sometimes you can merge them into a single param object uaing INTRODUCE PARAM OBJECT

3. how does removing it improve reusability?
	Code becomes shorter and more readable.
	May reveal duplicated code.

*Data Clumps
1. how do you know it is that bad smell, and how is it solved?
	- Different parts of the code contain identical groups of vars (such as params for connecting to db). These clumps should be turned into their own classes.
	
	- If repeating data comprises fields of a class, use EXTRACT CLASS.
	- If the same data clumps are passed in the params of methods use INTRODUCE PARAM OBJECT
	- If some of the data is passed to other methods think about passing the entire data object to the method instead of just individual fields, use PRESERVE WHOLE OBJECT
	- Look at the code used by these fields. It may be a good idea to move the code to a data class.
	
2. what does it look like?
	Identical data chucks in different places throughout the code.
	Copy and pasted data

3. how does removing it improve reusability?
	Improves understanding and organisation  of code. Particular data operations are in the same place. 
	Centralises the code, less problems with inconsistency.
	Reduces code size.

***Object-Orientation Abusers***
*Switch Statements
1. how do you know it is that bad smell, and how is it solved?
	- Complex if/else 's or switch statments
	
	- To isolate switch and put in right code EXTRACT METHOD and then MOVE METHOD
	- If switch is based on TypeCode then REPLACE TYPE CODE WITH STRATEGY
	- After specifying inheritance structure use REPLACE CONDITIONAL WITH POLYMORPHISM
	- If too many conditionals and all call same method with different params, break method int omultiple smaller methods with REPLACE PARAM WITH EXPLICIT METHODS
	- if one of the conditional opitions is null use INTRODUCE NULL OBJECT

3. how does removing it improve reusability?
	Improve code organisation.
	Easier to follow what the code is doing.
	
	but ignore switch or if where it is doing simple things, or where it is reuired by a factory design pattern.
		
*Temporary Field
1. how do you know it is that bad smell, and how is it solved?
	- Temporary fields get their value only under certain circumstances, otherwise they sit empty.
	
	- Temporary fields and code using them can be put into their own class via EXTRACT CLASS.
	- INTRODUCE NULL OBJECT and integrate it in place of the conditional code which was used to check the temporary field values for existence.

3. how does removing it improve reusability?
	Better code clarity and understanding.
	Easier to read.
	More efficiency
	More focussed code.

*Refused bequest
1. how do you know it is that bad smell, and how is it solved?
	- a subclass only uses some of its methods and properties inherited from its parents.
	
	- if inheritance makes no sense and the subclass has nothing in common with the superclass REPLACE INHERITANCE WITH DELEGATION
	- if inheritance is appropriate, get rid of unneeded fields and methods in the subclass. Extract all fields and methods needed by the subclass from the parent class, put them in a new subclass and set both classes to inherit from it using EXTRACT SUPERCLASS.

3. how does removing it improve reusability?
	Improves code clarity and organisation
	
*Alternative Class with Different Interfaces
1. how do you know it is that bad smell, and how is it solved?
	- 2 classes perform identical functions but have different method names
	
	- RENAME METHODS to make them identical in all alternative classes.
	- to make the signature and implementation of methods the same MOVE METHOD, ADD PARAM, and PARAMETERISE METHOD.
	- if only part of the funcationality of the classes is duplicated try using EXTRACT SUPERCLASS. In this case the existing classes will become subclasses.

3. how does removing it improve reusability?
	Get rid of unnecessary duplicated code. Code is then less bulky.
	Code more readable. No longer need to guess the reason for 2 classes performing the same functions.

***Change Preventers***
*Divergent Change
1. how do you know it is that bad smell, and how is it solved?
	- You find yourself having to change many unrelated methods when you make changes to a class. eg: when adding a new product type you need to change methods for finding,, displaying and ordering products.
	
	- split up behaviour of a class via EXTRACT CLASS
	- if different classes have the same same behaviour, you may want to combine the classes through inheritance using EXTRACT SUPERCLASS or EXTRACT SUBCLASS

3. how does removing it improve reusability?
	easiier to add and maintain. 
	more modular for future use.
	improves code organisation.

*Shotgun Surgery
1. how do you know it is that bad smell, and how is it solved?
	- making any small modifications reuires making small canges to many different classes. A single responsibility has been split up between a large number of classes.
	
	- use MOVE METHOD or MOVE FIELD to move existing class behaviour into a single class. If there is no class appropriate for this, create one.
	- if moving code to the same class leaves the original classes almost empty, try to get rid of these redundant classes via INLINE CLASS. 

3. how does removing it improve reusability?
	easier to maintain because the code is simpler to change. dont need to make changes all over the place.			

*Parallel Inheritance Hierarchies
1. how do you know it is that bad smell, and how is it solved?
	- Whenever creating a subclass you find yourself having to create a subclass for another class.
	
	- May de-duplicate paralle class hierarchies in 2 steps. 1st make instances of one hierarchy refer to instances of another hierarchy. Then remove the hierarchy in the reffered class by using MOVE METHOD and MOVE FIELD

3. how does removing it improve reusability?
	improves maintainability and readability

***Dispensibles***
*Comments
1. how do you know it is that bad smell, and how is it solved?
	- methods shouldnt be filled with explanatory code. Means the code isnt written self explanatory enough.
	
	-- if  a comment is intended to explain a complex expression, then it should be split into understandable subexpressions using EXTRACT VARIABLE
	- If a comment explains a section of code, this section can be turned into a separate method via EXTRACT METHOD.
	- If a method has already been extracted, but comments are still necessary to explain what the method does, RENAME METHOD 
	- if you need to assert rules about a state that is necessary for the system to work, use INTRODUCE ASSERTION

3. how does removing it improve reusability?
	Code becomes more intuitive. Easier to understand how the code works.

*Duplicate Code
1. how do you know it is that bad smell, and how is it solved?
	- code pieces look the same in multiple places.
	
	- if code used in multiple places in same class use EXTRACT METHOD and place calls for the new method in both places.
	- if same code is in 2 subclasses of same level
		- use EXTRACT METHOD for both classes, followed by PULL UP FIELD
		- if duplicate code in constructor PULL UP CONSTRUCTOR BODY
		- if duplicate code is similar but not identical use FORM TEMPLATE METHOD
		- if two methods do the same thing but use different allgorithms, select the best algortithm and apply the SUBSTITUE ALGORITHM
	- if duplicate code found in 2 separate classes
		- if the classes are not part of a hierarchy use EXTRACT SUPERCLASS=
		- if difficult to create superclass use EXTRACT CLASS in one class, and use the new one in the other.
	- if a large number of conditional expressions are present and perform the same code merge methods into asingle condition using CONSOLIDATE CONDITIONAL EXPRESSION and use EXTRACT METHOD to place the condition in a separate method with easy to understand name.
	- if the same code is performed in all branches of a conditional expression place the identical code outside the condition tree by using CONSOLIDATE DUPLICATE CONDITIONAL FRAGMENTS

3. how does removing it improve reusability?
	simplifies code structure, makes it simpler
	easier to maintain and support
			
*Lazy Class
1. how do you know it is that bad smell, and how is it solved?
	-class doesnt do enough to earn your attention, then it should be deleted.
	
	- components that are near useless should be given the INLINE CLASS treatment
	- for subclasses with few functions try COLLAPSE HIERARCY

3. how does removing it improve reusability?
	easier maintainance and smaller code

*Data Class
1. how do you know it is that bad smell, and how is it solved?
	- class only contains fields, getters and setters. No real functions run on the fields. They are just dumb data holders. They cannot operate independantly on their own data.
	
	- if a class contains public fields use ENCAPSULATE FIELD to hide them and reuire getters and setters to access.
	-use ENCAPSULATE COLLECTION for data stored in collections (such as lists)
	- Review the client code used by the class. If any functionality would be better in the data class itself then MOVE METHOD and EXTRACT METHOD to move the funcationality to the data class.
	- after class has been filled with well thought out methods, may want to get rid of the old methods for data access that give overly broad access to the class data. For this REMOVE SETTING METHOD and HIDE METHOD may be useful.

3. how does removing it improve reusability?
	Operations on particular data is now in one place. Better modularity for reuse.

*Dead Code
1. how do you know it is that bad smell, and how is it solved?
	- a var, parameter, field, method or class is no longer used.
	
	- delete unused code
	- in the case of an unnecessary class use INLINE CLASS or COLLAPSE HIERARCHY.
	- to remove unneeded params use REMOVE PARAMS

3. how does removing it improve reusability?
	easier to rread with smaller code
	no temptation to maintain unused code. can't reuse code that never gets used.

*Speculative Granularity
1. how do you know it is that bad smell, and how is it solved?
	- code is created just in case of future features that never get implemented.
	
	- unused abstract classes, COLLAPSE HIERARCHY
	- unnecessary delegation of functionality to another class eliminated via INLINE Class
	- unused methods = INLINE METHOD to get rid of them
	- methods with unused params should be given a look with the help of REMOVE PARAM
	- unused fields can be simply deleted

3. how does removing it improve reusability?
	slimmer code
	dont need to support code that isnt even implemented

***Couplers***
*Feature Envy
1. how do you know it is that bad smell, and how is it solved?
	- Method accesses the data of another object more than its own data.
	
	- if things change at the same time, you should keep them in the same place.
	- if a method clearly should be moved to another place MOVE Method
	- if only part of a method accesses the data of another object, use EXTRACT METHOD to move the part
	- If a method uses data frm many classes work out which class it uses most from. Then place the method in this class along with the other data.

3. how does removing it improve reusability?
	less code duplication, code is in  a central place
	better modularity. data and data handling happen in the same place

*Inappropriate Intimacy
1. how do you know it is that bad smell, and how is it solved?

	- one class uses the internal fields and methods of another class
	
	- simplest is to MOVE METHOD and MOVE FIELD. But only works if the first class truly does not need these parts.
	- Another solution is to EXTRACT CLASS and HIDE DELEGATE on the class to make the code relations official
	- if the classes are mutually independant use CHANGE BIDIRECTIONAL ASSOCIATION TO UNIDIRECTIONAL
	- if intimacy is between subclass and superclass consider REPLACE DELEGATION WITH INHERITANCE

3. how does removing it improve reusability?
	improves modularity and code organisation

*Message chains
1. how do you know it is that bad smell, and how is it solved?
	-there is a chain of object requests. Means that the client is dependent on navigation along the class structure. ANy changes in relationships require modifying the client.
	
	- to delete a message chain use HIDE DELEGATE 
	- sometimes better to think of why the end object is being used. Perhaps it would make sense to use EXTRACT METHOD for this functionality and move it to the begining of the chain by using MOVE METHOD.
	
2. what does it look like?		objectOne->doFunctionOne()->doFunctionTwo()->doFunctionThree()

3. how does removing it improve reusability?
	reduces dependency between classes, more modularity

*Middleman
1. how do you know it is that bad smell, and how is it solved?
	- class performs only one action and delegates work to another class, why does it exist?
	
	- If most of a methods classes delegate to another class use REMOVE MIDDLEMAN

3. how does removing it improve reusability?
	better modularity, functions are performed in one place.

*Incomplete Library Class1. 
how do you know it is that bad smell, and how is it solved?
	- changing library not possible because it is read-only
	
	- introduce a few methods to a library class, INTRODUCE FOREIGN METHOD
	- for big changes in a class library use INTRODUCE LOCAL EXTENSION

3. how does removing it improve reusability?
	can keep using old library rather than having to create a new one for the new functionality. Dont have to rebuild the whole thing, just piggy back off old one.